{"version":3,"sources":["logo.svg","components/FrontComponent.js","components/BackComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FrontComponent","props","className","onClick","handleClick","style","backgroundColor","playerColor","value","BackComponent","number","App","shuffledCards","a","i","length","j","Math","floor","random","shuffle","text","isFlipped","reduce","res","current","index","array","concat","useState","cards","setCards","flipped1","setFlipped1","flippedCounter","setFlippedCounter","setPlayerColor","flippedCard","console","log","color","setTimeout","display","fontSize","justifyContent","marginLeft","width","height","map","card","key","flipDirection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,qJCW5BC,EANQ,SAAEC,GAAF,OACrB,yBAAKC,UAAU,OAAOC,QAAUF,EAAMG,YAAcC,MAAQ,CAAEC,gBAAiBL,EAAMM,aAAe,uBAClG,8BAAQN,EAAMO,SCKHC,EAPO,SAAER,GAAF,OACpB,yBAAKC,UAAU,OAAOC,QAAUF,EAAMG,aACpC,8BAAQH,EAAMS,UC0KHC,EA9JH,WACV,IAoEMC,EA7EQ,SAAEC,GAChB,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAM,CACtC,IAAME,EAAIC,KAAKC,MAAOD,KAAKE,UAAYL,EAAI,IADL,EAEjB,CAAED,EAAGG,GAAKH,EAAGC,IAAhCD,EAAGC,GAFiC,KAE5BD,EAAGG,GAFyB,KAIxC,OAAOH,EAwEeO,CApEL,CACf,CACEC,KAAM,gBACNC,WAAW,GAEb,CACED,KAAM,cACNC,WAAW,GAEb,CACED,KAAM,gBACNC,WAAW,GAEb,CACED,KAAM,YACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,eACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,aACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,eACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,aACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,eACNC,WAAW,GAEb,CACED,KAAM,iBACNC,WAAW,GAEb,CACED,KAAM,aACNC,WAAW,IAEbC,QAAQ,SAAEC,EAAKC,EAASC,EAAOC,GAC/B,OAAOH,EAAII,OAAQ,CAAEH,EAAF,eAAgBA,OAClC,KApEa,EAsEYI,mBAAUjB,GAtEtB,mBAsERkB,EAtEQ,KAsEDC,EAtEC,OAyEkBF,mBAAU,MAzE5B,mBAyERG,EAzEQ,KAyEEC,EAzEF,OA0E8BJ,mBAAU,GA1ExC,mBA0ERK,EA1EQ,KA0EQC,EA1ER,OA6EwBN,mBAAU,WA7ElC,mBA6ERtB,EA7EQ,KA6EK6B,EA7EL,KA+EVhC,EAAc,SAAEsB,GAEpB,GAAII,EAAOJ,GAAQJ,WAAaY,EAAiB,EAAI,CACnD,IAAIG,EAAW,eACVP,EAAOJ,GADG,CAEbA,UAGFI,EAAOJ,GAAQJ,WAAae,EAAYf,UACxCa,EAAmBD,EAAiB,GACpCI,QAAQC,IAAK,iBAAkBL,GAC/BH,EAAS,YACJD,IAGY,OAAbE,EACFC,EAAaI,GAGTL,EAASX,OAASgB,EAAYhB,MAChCiB,QAAQC,IAAK,YACbN,EAAa,MACbH,EAAOE,EAASN,OAAQc,MAAQjC,EAChCuB,EAAOO,EAAYX,OAAQc,MAAQjC,EACnCwB,EAAS,YACJD,IAELK,EAAmB,KAGnBG,QAAQC,IAAK,MACbE,YAAY,WACVX,EAAOE,EAASN,OAAQJ,WAAY,EACpCQ,EAAOO,EAAYX,OAAQJ,WAAY,EACvCW,EAAa,MAGbF,EAAS,YACJD,IAELK,EAAmB,GACnBC,EAAgC,YAAhB7B,EACZ,UACA,aACH,QAQX,OACE,oCACE,yBAAKF,MAAQ,CAAEqC,QAAS,OAAQC,SAAU,OAAQC,eAAgB,SAAUC,WAAY,SACtF,kDACA,yBAAKxC,MAAQ,CACXyC,MAAO,QACPC,OAAQ,OACRzC,gBAAiBC,MAIrB,yBAAKL,UAAU,OAEX4B,EAAMkB,KAAK,SAAEC,EAAMvB,GAAR,OACT,kBAAC,IAAD,CAAewB,IAAMxB,EAAQJ,UAAY2B,EAAK3B,UAAY6B,cAAc,cACtE,kBAAC,EAAD,CAAgB/C,YAAc,kBAAMA,EAAasB,IACjClB,MAAQyC,EAAK5B,KACbd,YAAc0C,EAAKT,QACnC,kBAAC,EAAD,CAAepC,YAAc,kBAAMA,EAAasB,IAAUhB,OAASgB,EAAQ,WC5JrE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.a64e7839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n * Created by chalosalvador on 7/12/20\n */\nimport React from 'react';\n\nconst FrontComponent = ( props ) => (\n  <div className='card' onClick={ props.handleClick } style={ { backgroundColor: props.playerColor || 'rgb(208, 207, 207)' } }>\n    <span>{ props.value }</span>\n  </div>\n);\n\nexport default FrontComponent;\n","/**\n * Created by chalosalvador on 7/12/20\n */\nimport React from 'react';\n\nconst BackComponent = ( props ) => (\n  <div className='card' onClick={ props.handleClick }>\n    <span>{ props.number }</span>\n    {/*<span>This is the back of the card.</span>*/}\n  </div>\n);\n\nexport default BackComponent;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactCardFlip from 'react-card-flip';\nimport FrontComponent from './components/FrontComponent';\nimport BackComponent from './components/BackComponent';\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nconst shuffle = ( a ) => {\n  for( let i = a.length - 1; i > 0; i-- ) {\n    const j = Math.floor( Math.random() * (i + 1) );\n    [ a[ i ], a[ j ] ] = [ a[ j ], a[ i ] ];\n  }\n  return a;\n};\n\nconst App = () => {\n  const cardDeck = [\n    {\n      text: '5 Abdominales',\n      isFlipped: true\n    },\n    {\n      text: '5 Flexiones',\n      isFlipped: true\n    },\n    {\n      text: '5 Sentadillas',\n      isFlipped: true\n    },\n    {\n      text: '5 Sapitos',\n      isFlipped: true\n    },\n    {\n      text: '10 Abdominales',\n      isFlipped: true\n    },\n    {\n      text: '10 Flexiones',\n      isFlipped: true\n    },\n    {\n      text: '10 Sentadillas',\n      isFlipped: true\n    },\n    {\n      text: '10 Sapitos',\n      isFlipped: true\n    },\n    {\n      text: '15 Abdominales',\n      isFlipped: true\n    },\n    {\n      text: '15 Flexiones',\n      isFlipped: true\n    },\n    {\n      text: '15 Sentadillas',\n      isFlipped: true\n    },\n    {\n      text: '15 Sapitos',\n      isFlipped: true\n    },\n    {\n      text: '20 Abdominales',\n      isFlipped: true\n    },\n    {\n      text: '20 Flexiones',\n      isFlipped: true\n    },\n    {\n      text: '20 Sentadillas',\n      isFlipped: true\n    },\n    {\n      text: '20 Sapitos',\n      isFlipped: true\n    },\n  ].reduce( ( res, current, index, array ) => {\n    return res.concat( [ current, { ...current } ] );\n  }, [] );\n  const shuffledCards = shuffle( cardDeck );\n  const [ cards, setCards ] = useState( shuffledCards );\n\n\n  const [ flipped1, setFlipped1 ] = useState( null );\n  const [ flippedCounter, setFlippedCounter ] = useState( 0 );\n\n  // const players = [ 'green', 'blue' ];\n  const [ playerColor, setPlayerColor ] = useState( '#ff4e15' );\n\n  const handleClick = ( index ) => {\n\n    if( cards[ index ].isFlipped && flippedCounter < 2 ) {\n      let flippedCard = {\n        ...cards[ index ],\n        index\n      };\n\n      cards[ index ].isFlipped = !flippedCard.isFlipped;\n      setFlippedCounter( flippedCounter + 1 );\n      console.log( 'flippedCounter', flippedCounter );\n      setCards( [\n        ...cards\n      ] );\n\n      if( flipped1 === null ) {\n        setFlipped1( flippedCard );\n      } else {\n\n        if( flipped1.text === flippedCard.text ) {\n          console.log( 'Correcto' );\n          setFlipped1( null );\n          cards[ flipped1.index ].color = playerColor;\n          cards[ flippedCard.index ].color = playerColor;\n          setCards( [\n            ...cards\n          ] );\n          setFlippedCounter( 0 );\n\n        } else {\n          console.log( 'NO' );\n          setTimeout( () => {\n            cards[ flipped1.index ].isFlipped = true;\n            cards[ flippedCard.index ].isFlipped = true;\n            setFlipped1( null );\n            // setFlipped2( null );\n\n            setCards( [\n              ...cards\n            ] );\n            setFlippedCounter( 0 );\n            setPlayerColor( playerColor === '#ff4e15'\n              ? '#ffc300'\n              : '#ff4e15' );\n          }, 2000 );\n        }\n      }\n    }\n    // console.log( 'flippedCounter', flippedCounter );\n\n  };\n\n  return (\n    <>\n      <div style={ { display: 'flex', fontSize: '3rem', justifyContent: 'center', marginLeft: '10px'} }>\n        <span>Turno del equipo</span>\n        <div style={ {\n          width: '150px',\n          height: '80px',\n          backgroundColor: playerColor\n        } }>\n        </div>\n      </div>\n      <div className='App'>\n        {\n          cards.map( ( card, index ) =>\n            <ReactCardFlip key={ index } isFlipped={ card.isFlipped } flipDirection='horizontal'>\n              <FrontComponent handleClick={ () => handleClick( index ) }\n                              value={ card.text }\n                              playerColor={ card.color } />\n              <BackComponent handleClick={ () => handleClick( index ) } number={ index + 1 } />\n            </ReactCardFlip>\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}