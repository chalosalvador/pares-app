{"version":3,"sources":["components/FrontComponent.js","components/BackComponent.js","firebase/index.js","firebase/games.js","App.js","serviceWorker.js","index.js"],"names":["FrontComponent","props","className","onClick","handleClick","style","backgroundColor","playerColor","value","BackComponent","number","app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firestore","cookies","Cookies","collection","Game","add","cardDeck","currentPlayer","players","createdAt","FieldValue","serverTimestamp","get","id","doc","updateStatus","update","generatePlayerId","playerUID","set","expires","Date","updatePlayers","gameId","App","cardDeckTemplate","useState","setGameId","setCardDeck","flipped1","setFlipped1","flippedCounter","setFlippedCounter","setCurrentPlayer","thisPlayer","setThisPlayer","setPlayers","currentColor","setCurrentColor","showInstructions","setShowInstructions","showSelectPlayerColor","setShowSelectPlayerColor","gettingGame","setGettingGame","React","useEffect","a","gameSnap","onSnapshot","game","exists","data","length","color","initGame","startNewGame","docRef","joinGame","document","querySelector","some","player","uid","setPlayer","playerData","color1Players","filter","color2Players","newPlayer","name","push","playersUpdated","map","v","i","reduce","b","concat","getNextPlayer","nextPlayer","flipCard","index","isFlipped","flippedCard","text","setTimeout","width","height","marginLeft","card","key","flipDirection","visible","effect","type","colorElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c12e4f8.chunk.js","sourcesContent":["/**\n * Created by chalosalvador on 7/12/20\n */\nimport React from 'react';\n\nconst FrontComponent = ( props ) => (\n  <div className='card' onClick={ props.handleClick } style={ { backgroundColor: props.playerColor || 'rgb(208, 207, 207)' } }>\n    <span>{ props.value }</span>\n  </div>\n);\n\nexport default FrontComponent;\n","/**\n * Created by chalosalvador on 7/12/20\n */\nimport React from 'react';\n\nconst BackComponent = ( props ) => (\n  <div className='card' onClick={ props.handleClick }>\n    <span>{ props.number }</span>\n    {/*<span>This is the back of the card.</span>*/}\n  </div>\n);\n\nexport default BackComponent;\n","import app, { firestore } from 'firebase/app';\n\n// import 'firebase/auth';\n// import 'firebase/database';\n// import 'firebase/storage';\n// import 'firebase/functions';\nimport { database } from 'firebase';\n\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID\n};\n\napp.initializeApp( config );\n\n// export default app;\n// export const auth = app.auth();\nexport const db = app.firestore();\n// export const functions = app.functions();\n// export const storage = app.storage();\n\n// // *** Auth API ***\n//\n// export const listenAuthState = ( observer ) => {\n//   return auth.onAuthStateChanged( observer );\n// };\n//\n// export const doSignInWithEmailAndPassword = ( email, password ) => {\n//   return auth.signInWithEmailAndPassword( email, password );\n// };\n\n// export const doLogout = () => auth.signOut();\n\n// export const serverTimestamp = () => firestore.FieldValue.serverTimestamp();\n","/**\n * Created by chalosalvador on 2020-07-17\n */\n\nimport { db } from './index';\nimport Cookies from 'universal-cookie';\nimport app, { firestore } from 'firebase/app';\n\n\nconst cookies = new Cookies();\n\nconst collection = db.collection( 'games' );\n\nconst add = ( cardDeck ) => collection.add( {\n  currentPlayer: 0,\n  players: [],\n  cardDeck: cardDeck,\n  createdAt: firestore.FieldValue.serverTimestamp()\n} );\nconst get = id => collection.doc( id );\nconst getGames = ( orderBy = 'createdAt' ) => collection.orderBy( orderBy, 'desc' );\nconst updateCardDeck = ( id, cardDeck ) => collection.doc( id ).set( { cardDeck } );\nconst updateStatus = ( id, cardDeck, currentPlayer ) => collection.doc( id )\n  .update( {\n    cardDeck,\n    currentPlayer\n  } );\n\nconst generatePlayerId = () => {\n  const playerUID = collection.doc().id;\n  cookies.set( 'playerUID', playerUID, { expires: new Date( 2025, 12, 31 ) } );\n  return playerUID;\n\n};\n\nconst updatePlayers = ( gameId, players ) => collection.doc( gameId ).update( { players } );\n\nconst Game = {\n  add,\n  get,\n  updateStatus,\n  generatePlayerId,\n  updatePlayers\n};\n\nexport default Game;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ReactCardFlip from 'react-card-flip';\nimport FrontComponent from './components/FrontComponent';\nimport BackComponent from './components/BackComponent';\nimport Game from './firebase/games';\nimport Cookies from 'universal-cookie';\nimport Modal from 'react-awesome-modal';\n\n\nconst cookies = new Cookies();\n\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nconst shuffle = ( a ) => {\n  for( let i = a.length - 1; i > 0; i-- ) {\n    const j = Math.floor( Math.random() * (i + 1) );\n    [ a[ i ], a[ j ] ] = [ a[ j ], a[ i ] ];\n  }\n  return a;\n};\n\nconst App = () => {\n\n  const cardDeckTemplate = [\n    {\n      'text': '5 Abdominales',\n      'isFlipped': true\n    },\n    {\n      'text': '15 Portales',\n      'isFlipped': true,\n    },\n    {\n      'text': '15 Abdominales',\n      'isFlipped': true,\n    },\n    {\n      'text': '5 Portales',\n      'isFlipped': true,\n    },\n    {\n      'text': '20 Sapitos',\n      'isFlipped': true\n    },\n    {\n      'isFlipped': true,\n      'text': '5 Abdominales'\n    },\n    {\n      'isFlipped': true,\n      'text': '15 Abdominales'\n    },\n    {\n      'text': '10 Flexiones',\n      'isFlipped': true\n    },\n    {\n      'text': '25 Abdominales',\n      'isFlipped': true,\n    },\n    {\n      'text': '20 Sapitos',\n      'isFlipped': true\n    },\n    {\n      'text': '5 Portales',\n      'isFlipped': true,\n    },\n    {\n      'text': '10 Flexiones',\n      'isFlipped': true,\n    },\n    {\n      'text': '15 Portales',\n      'isFlipped': true,\n    },\n    {\n      'text': '25 Abdominales',\n      'isFlipped': true,\n    },\n  ];\n\n  const [ gameId, setGameId ] = useState( null );\n  const [ cardDeck, setCardDeck ] = useState( [] );\n  const [ flipped1, setFlipped1 ] = useState( null );\n  const [ flippedCounter, setFlippedCounter ] = useState( 0 );\n  const [ currentPlayer, setCurrentPlayer ] = useState( 0 );\n  const [ thisPlayer, setThisPlayer ] = useState( {} );\n  const [ players, setPlayers ] = useState( [] );\n  const [ currentColor, setCurrentColor ] = useState( 'transparent' );\n  const [ showInstructions, setShowInstructions ] = useState( true );\n  const [ showSelectPlayerColor, setShowSelectPlayerColor ] = useState( false );\n  const [ gettingGame, setGettingGame ] = useState( false );\n  let playerUID = cookies.get( 'playerUID' ); // if the user has already an UID\n\n  React.useEffect( () => {\n    if( !playerUID ) {\n      playerUID = Game.generatePlayerId();\n    }\n    // console.log( 'playerUID', playerUID );\n    const initGame = async() => {\n      if( gameId ) {\n        setShowInstructions( false );\n\n        setGettingGame( true );\n        const gameSnap = await Game.get( gameId );\n        setGettingGame( false );\n        // TODO unsubscribe\n        gameSnap.onSnapshot( ( game ) => {\n          // console.log( 'game.exists', game.exists );\n          if( !game.exists ) {\n            setShowInstructions( true );\n            return;\n          }\n          // console.log( 'game', JSON.stringify( game.data(), null, 2 ) );\n          setCardDeck( game.data().cardDeck );\n          setCurrentPlayer( game.data().currentPlayer );\n          setPlayers( game.data().players );\n          if( game.data().players.length > 0 ) {\n            setCurrentColor( game.data().players[ game.data().currentPlayer ].color );\n          }\n        } );\n      }\n    };\n    initGame();\n  }, [ gameId ] );\n\n  const startNewGame = async() => {\n    const docRef = await Game.add( cardDeckTemplate );\n    // console.log( 'docRef.id', docRef.id );\n    setGameId( docRef.id );\n  };\n\n  // const onChangeGameID = ( e ) => {\n  //   if( e.target.value !== '' ) {\n  //     setGameId( e.target.value );\n  //   }\n  // };\n\n  const joinGame = async() => {\n    if( document.querySelector( '#game-id' ).value ) {\n      setGameId( document.querySelector( '#game-id' ).value );\n      // const gameSnap = await Game.get( document.querySelector( '#game-id' ).value  );\n      // setGettingGame( false );\n      // // TODO unsubscribe\n      // gameSnap.onSnapshot( ( game ) => {\n      //   console.log( 'game.exists', game.exists );\n      //   if( !game.exists ) {\n      //     return;\n      //   }\n      //   console.log( 'game', JSON.stringify( game.data(), null, 2 ) );\n      //   setCardDeck( game.data().cardDeck );\n      //   setCurrentPlayer( game.data().currentPlayer );\n      //   setPlayers( game.data().players );\n      //   if( game.data().players.length > 0 ) {\n      //     setCurrentColor( game.data().players[ game.data().currentPlayer ].color );\n      //   }\n      // } );\n\n      // Generate a unique ID for this device/user\n      // if( !playerUID ) {\n      //   playerUID = Game.generatePlayerId();\n      // }\n      // console.log( 'playerUID', playerUID );\n\n      setShowInstructions( false );\n    }\n  };\n\n  // Check if player has joined\n  React.useEffect( () => {\n    if( gameId ) {\n      // console.log( 'players Effect', players );\n      const alreadyJoined = players.some( ( player ) => {\n        return player.uid === playerUID;\n      } );\n\n      // console.log( 'alreadyJoined', alreadyJoined );\n\n      if( !alreadyJoined ) {\n        // Select color\n        setShowSelectPlayerColor( true );\n      }\n    }\n  }, [ players ] );\n\n  const setPlayer = async( playerData ) => {\n    // console.log( 'players', players );\n    const color1Players = players.filter( ( player ) => {\n      return player.color === '#ffc300';\n    } );\n\n    const color2Players = players.filter( ( player ) => {\n      return player.color === '#ff4e15';\n    } );\n\n    // console.log( 'playerData', playerData );\n    const newPlayer = {\n      uid: playerUID,\n      color: playerData.color,\n      name: playerData.name\n    };\n\n    // console.log( 'newPlayer', newPlayer );\n\n\n    setThisPlayer( newPlayer );\n\n    if( players[ 0 ] ) {\n      if( playerData.color === '#ffc300' ) {\n        color1Players.push( newPlayer );\n      } else {\n        color2Players.push( newPlayer );\n      }\n\n      // console.log( 'color1Players', color1Players );\n      // console.log( 'color2Players', color2Players );\n\n      let playersUpdated = [];\n      if( players[ 0 ].color === '#ffc300' ) {\n        playersUpdated = color1Players.map( ( v, i ) => {\n          if( color2Players[ i ] ) {\n            return [ v, color2Players[ i ] ];\n          } else {\n            return [ v ];\n          }\n        } )\n          .reduce( ( a, b ) => a.concat( b ) );\n      } else {\n        playersUpdated = color2Players.map( ( v, i ) => {\n          if( color1Players[ i ] ) {\n            return [ v, color1Players[ i ] ];\n          } else {\n            return [ v ];\n          }\n        } )\n          .reduce( ( a, b ) => a.concat( b ), [] );\n      }\n      // console.log( 'playersUpdated', playersUpdated );\n      await Game.updatePlayers( gameId, playersUpdated );\n    } else {\n      await Game.updatePlayers( gameId, [ newPlayer ] );\n    }\n    setShowSelectPlayerColor( false );\n  };\n\n  const getNextPlayer = () => {\n    let nextPlayer = 0;\n\n    if( currentPlayer < players.length - 1 ) {\n      nextPlayer = currentPlayer + 1;\n    }\n\n    // console.log( 'nextPlayer', nextPlayer );\n    return nextPlayer;\n  };\n\n  const flipCard = async( index ) => {\n\n    if( players[ currentPlayer ].uid === playerUID ) {\n      if( cardDeck[ index ].isFlipped && flippedCounter < 2 ) {\n        let flippedCard = {\n          ...cardDeck[ index ],\n          index\n        };\n\n        cardDeck[ index ].isFlipped = !flippedCard.isFlipped;\n        setFlippedCounter( flippedCounter + 1 );\n        // console.log( 'flippedCounter', flippedCounter );\n\n        await Game.updateStatus( gameId, cardDeck, currentPlayer );\n\n        if( flipped1 === null ) {\n          setFlipped1( flippedCard );\n        } else {\n\n          if( flipped1.text === flippedCard.text ) {\n            // console.log( 'Correcto' );\n            setFlipped1( null );\n            cardDeck[ flipped1.index ].color = players[ currentPlayer ].color;\n            cardDeck[ flippedCard.index ].color = players[ currentPlayer ].color;\n            await Game.updateStatus( gameId, cardDeck, currentPlayer );\n\n            setFlippedCounter( 0 );\n\n          } else {\n            // console.log( 'NO' );\n            setTimeout( async() => {\n              cardDeck[ flipped1.index ].isFlipped = true;\n              cardDeck[ flippedCard.index ].isFlipped = true;\n              setFlipped1( null );\n              setFlippedCounter( 0 );\n              const nextPlayer = getNextPlayer();\n              await Game.updateStatus( gameId, cardDeck, nextPlayer );\n            }, 1000 );\n          }\n        }\n      }\n    }\n\n  };\n\n  return (\n    <>\n      {\n        gameId && players.length > 0 && <>\n          <div>\n            Hola { thisPlayer.name }\n          </div>\n          <div>\n            Invita a tus amigos a que se unan con este ID: { gameId }\n          </div>\n          <div className='title'>\n            <span>Turno del equipo</span>\n            <div style={ {\n              width: '150px',\n              height: '80px',\n              backgroundColor: currentColor,\n              marginLeft: '10px'\n            } }>\n              { players[ currentPlayer ].name }\n            </div>\n          </div>\n\n          <div>\n            <button onClick={ () => setShowInstructions( true ) }>Ver instrucciones</button>\n          </div>\n\n          <div className='App'>\n            {\n              cardDeck.map( ( card, index ) =>\n                <ReactCardFlip key={ index } isFlipped={ card.isFlipped } flipDirection='horizontal'>\n                  {\n                    !card.isFlipped && <FrontComponent handleClick={ () => flipCard( index ) }\n                                                       value={ card.text }\n                                                       playerColor={ card.color } />\n                  }\n                  <BackComponent handleClick={ () => flipCard( index ) } number={ index + 1 } />\n                </ReactCardFlip>\n              )\n            }\n          </div>\n        </>\n      }\n\n\n      <Modal\n        visible={ showInstructions }\n        width='400'\n        // height='300'\n        effect='fadeInUp'\n        // onClickAway={ () => setShowInstructions( false ) }\n      >\n        <div className='instructions-wrapper'>\n          <h1>Pares Fit</h1>\n          <ul>\n            <li>Deben jugar mínimo dos jugadores o equipos.</li>\n            <li>Selecciona una carta y encuentra la pareja.</li>\n            <li>Si aciertas, puedes continuar con tu turno. Si fallas, es el turno del otro equipo.</li>\n            <li>Al final, el equipo contrario tendrá que realizar los ejercicios mostrados en las cartas que tu\n              acertaste.\n            </li>\n          </ul>\n\n          <div>\n            <button onClick={ startNewGame }>Empezar un nuevo juego</button>\n          </div>\n\n          <div>\n            <input type='text' id='game-id' />\n            {\n              !gettingGame\n                ? <button onClick={ joinGame }>Unirme a un juego</button>\n                : 'Obteniendo partida...'\n            }\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        visible={ showSelectPlayerColor }\n        width='400'\n        // height='300'\n        effect='fadeInUp'\n        // onClickAway={ () => setShowInstructions( false ) }\n      >\n        <div className='select-color-wrapper'>\n          <h1>Ingresa tu nombre</h1>\n          <input type='text' id='playerName' />\n          <h1>Selecciona un color</h1>\n          {\n            gettingGame\n              ? 'Obteniendo Partida...'\n              : <div>\n                <ul>\n                  <li>\n                    <div style={ {\n                      width: '150px',\n                      height: '80px',\n                      backgroundColor: '#ff4e15',\n                      marginLeft: '10px'\n                    } }>\n                      <input type='radio' value='#ff4e15' name='playerColor' />\n                    </div>\n                  </li>\n                  <li>\n                    <div style={ {\n                      width: '150px',\n                      height: '80px',\n                      backgroundColor: '#ffc300',\n                      marginLeft: '10px'\n                    } }>\n                      <input type='radio' value='#ffc300' name='playerColor' />\n                    </div>\n                  </li>\n                </ul>\n              </div>\n          }\n\n          <button onClick={ async() => {\n            const name = document.querySelector( '#playerName' ).value;\n            const colorElement = document.querySelector( 'input[name=\"playerColor\"]:checked' );\n            const color = colorElement && colorElement.value;\n            if( name && color ) {\n              await setPlayer( {\n                name,\n                color\n              } );\n            }\n          }\n          }>\n            Unirme\n          </button>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}